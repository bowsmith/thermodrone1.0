#include <ServoTimer2.h>

#include <SPI.h>

#include <SD.h>

#include <NMEAGPS.h>

File myFile;

ServoTimer2 myServo;

int tookPic = 0;



long rLat = 0;
long rLong = 0;
long rAlt = 0;
float rVel = 0;
String saveString;
String timeString;

String yearString;
String monthString;
String dateString;
String hourString;
String minuteString;
String secondString;



//======================================================================
//  Program: NMEA.ino
//
//  Description:  This program uses the fix-oriented methods available() and
//    read() to handle complete fix structures.
//
//    When the last character of the LAST_SENTENCE_IN_INTERVAL (see NMEAGPS_cfg.h)
//    is decoded, a completed fix structure becomes available and is returned
//    from read().  The new fix is saved the 'fix' structure, and can be used
//    anywhere, at any time.
//
//    If no messages are enabled in NMEAGPS_cfg.h, or
//    no 'gps_fix' members are enabled in GPSfix_cfg.h, no information will be
//    parsed, copied or printed.
//
//  Prerequisites:
//     1) Your GPS device has been correctly powered.
//          Be careful when connecting 3.3V devices.
//     2) Your GPS device is correctly connected to an Arduino serial port.
//          See GPSport.h for the default connections.
//     3) You know the default baud rate of your GPS device.
//          If 9600 does not work, use NMEAdiagnostic.ino to
//          scan for the correct baud rate.
//     4) LAST_SENTENCE_IN_INTERVAL is defined to be the sentence that is
//          sent *last* in each update interval (usually once per second).
//          The default is NMEAGPS::NMEA_RMC (see NMEAGPS_cfg.h).  Other
//          programs may need to use the sentence identified by NMEAorder.ino.
//     5) NMEAGPS_RECOGNIZE_ALL is defined in NMEAGPS_cfg.h
//
//  'Serial' is for debug output to the Serial Monitor window.
//
//  License:
//    Copyright (C) 2014-2017, SlashDevin
//
//    This file is part of NeoGPS
//
//    NeoGPS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    NeoGPS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with NeoGPS.  If not, see <http://www.gnu.org/licenses/>.
//
//======================================================================

//-------------------------------------------------------------------------
//  The GPSport.h include file tries to choose a default serial port
//  for the GPS device.  If you know which serial port you want to use,
//  edit the GPSport.h file.

#include <GPSport.h>

//------------------------------------------------------------
// For the NeoGPS example programs, "Streamers" is common set
//   of printing and formatting routines for GPS data, in a
//   Comma-Separated Values text format (aka CSV).  The CSV
//   data will be printed to the "debug output device".
// If you don't need these formatters, simply delete this section.

#include <Streamers.h>

//------------------------------------------------------------
// This object parses received characters
//   into the gps.fix() data structure

static NMEAGPS  gps;

//------------------------------------------------------------
//  Define a set of GPS fix information.  It will
//  hold on to the various pieces as they are received from
//  an RMC sentence.  It can be used anywhere in your sketch.

static gps_fix  fix;

//----------------------------------------------------------------
//  This function gets called about once per second, during the GPS
//  quiet time.  It's the best place to do anything that might take
//  a while: print a bunch of things, write to SD, send an SMS, etc.
//
//  By doing the "hard" work during the quiet time, the CPU can get back to
//  reading the GPS chars as they come in, so that no chars are lost.

static void doSomeWork()
{
  // Print all the things!

  trace_all( DEBUG_PORT, gps, fix );

  
  rLat = fix.latitudeL(); // latitude read from the gps. the data is an integer 
   rLong = fix.longitudeL(); // longitude read from the gps. the data is an integer
   rAlt = fix.altitude_cm(); // altitude in centimeters Note it is not the altitude from mean sea level. it is something else
  
  rVel = fix.speed_mph();
  // gets the data for the time. all the data are integers
    int rYear = fix.dateTime.year; 
    int rMonth = fix.dateTime.month;
    int rDate = fix.dateTime.date;
    int rHour = fix.dateTime.hours;
    int rMin = fix.dateTime.minutes;
    int rSec = fix.dateTime.seconds;
//

String zString = String(0);

// casts all the integer data for time into strings so I can add them together for the file saving
    String yearString = String(rYear);
    
    if (rMonth < 10)
    {
    String monthStr = String(rMonth);
    monthString = zString + monthStr;
    }
    else
    {
    monthString = String(rMonth);
    }
    
    if (rDate < 10)
    {
      String dateStr = String(rDate);
     dateString = zString + dateStr;
    }
    else
    {
      dateString = String(rDate);
    }

    if (rHour < 10)
    {
      String hourStr = String(rHour);
      hourString = zString + hourStr;
    }
    else
    {
       hourString = String(rHour);
    }

    if (rMin < 10)
    {
      String minStr = String (rMin);
       minuteString = zString + minStr;
    }
    else
    {
      minuteString = String(rMin);
    }

    if (rSec < 10)
    {
      String secondStr = String(rSec);
       secondString = zString + secondStr;
    }
    else
    {
      secondString = String(rSec);
    }
// slaps everything together into a save file. This is not perfect. it writes to the list every hour even if the time is different. that is far from the worst problem ever, but it still exists.
     saveString = yearString + monthString + dateString + hourString;

    // the detailed info for the pic.
     timeString = saveString + minuteString + secondString;

String SAVESTRING = String("gpsData");
    if((rVel < 2) && (rAlt > 3))
    {
      if (tookPic < 2)
      {
        myServo.write(1500);
        tookPic = 3;
        myFile = SD.open(SAVESTRING, FILE_WRITE);
    myFile.print(timeString);
    myFile.print(' ');
    myFile.print(rLat);
    myFile.print(' ');
    myFile.print(rLong);
    myFile.print(' ');
    myFile.print(rAlt);
    myFile.print(' ');
    myFile.println(rVel);

    myFile.close();
      }
      else
      {
        myServo.write(1000);
      }
    }
    else
    {
      tookPic = 0;
      myServo.write(1000);
    }
} // doSomeWork

//------------------------------------
//  This is the main GPS parsing loop.

static void GPSloop()
{
  while (gps.available( gpsPort )) {
    fix = gps.read();
    doSomeWork();
  }

} // GPSloop

//--------------------------

void setup()
{
  DEBUG_PORT.begin(9600);
  while (!DEBUG_PORT)
    ;

  DEBUG_PORT.print( F("NMEA.INO: started\n") );
  DEBUG_PORT.print( F("  fix object size = ") );
  DEBUG_PORT.println( sizeof(gps.fix()) );
  DEBUG_PORT.print( F("  gps object size = ") );
  DEBUG_PORT.println( sizeof(gps) );
  DEBUG_PORT.println( F("Looking for GPS device on " GPS_PORT_NAME) );

  #ifndef NMEAGPS_RECOGNIZE_ALL
    #error You must define NMEAGPS_RECOGNIZE_ALL in NMEAGPS_cfg.h!
  #endif

  #ifdef NMEAGPS_INTERRUPT_PROCESSING
    #error You must *NOT* define NMEAGPS_INTERRUPT_PROCESSING in NMEAGPS_cfg.h!
  #endif

  #if !defined( NMEAGPS_PARSE_GGA ) & !defined( NMEAGPS_PARSE_GLL ) & \
      !defined( NMEAGPS_PARSE_GSA ) & !defined( NMEAGPS_PARSE_GSV ) & \
      !defined( NMEAGPS_PARSE_RMC ) & !defined( NMEAGPS_PARSE_VTG ) & \
      !defined( NMEAGPS_PARSE_ZDA ) & !defined( NMEAGPS_PARSE_GST )

    DEBUG_PORT.println( F("\nWARNING: No NMEA sentences are enabled: no fix data will be displayed.") );

  #else
    if (gps.merging == NMEAGPS::NO_MERGING) {
      DEBUG_PORT.print  ( F("\nWARNING: displaying data from ") );
      DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
      DEBUG_PORT.print  ( F(" sentences ONLY, and only if ") );
      DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
      DEBUG_PORT.println( F(" is enabled.\n"
                            "  Other sentences may be parsed, but their data will not be displayed.") );
    }
  #endif

  DEBUG_PORT.print  ( F("\nGPS quiet time is assumed to begin after a ") );
  DEBUG_PORT.print  ( gps.string_for( LAST_SENTENCE_IN_INTERVAL ) );
  DEBUG_PORT.println( F(" sentence is received.\n"
                        "  You should confirm this with NMEAorder.ino\n") );

  trace_header( DEBUG_PORT );
  DEBUG_PORT.flush();

  gpsPort.begin( 9600 );

  
  SD.begin(4);

  myServo.attach(6);
  
}

//--------------------------

void loop()
{
  GPSloop();
  
}
